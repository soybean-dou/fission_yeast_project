ID_1<-unlist(strsplit(x[i,1], ":"))[1]
for(j in 1:(nrow(x)-1)){
ID_2<-unlist(strsplit(x[j,1], ":"))[1]
if(j==i) next
if(ID_1 == ID_2){
x<-x[-j,]
}
if((nrow(x)-1)==j) break
}
if((nrow(x)-1)<=i) break
}
return(x)
}
overlap_fUTR_ch1_temp<-delete_duplicate_factor(overlap_fUTR_ch1)
View(overlap_fUTR_ch1_temp)
three_UTR_ch1<-three_UTR_ch1[order(three_UTR_ch1$start,)]
View(three_UTR_ch1)
three_UTR_ch1<-three_UTR_ch1[order(three_UTR_ch1$start),]
overlap_tUTR_ch1<-find_overlapping_gene_UTR(CDS_ch1,three_UTR_ch1)
overlap_tUTR_ch1_temp<-delete_duplicate_factor(overlap_tUTR_ch1)
View(overlap_tUTR_ch1_temp)
five_UTR_ch1<-gene_data[0,]
five_UTR_ch2<-gene_data[0,]
five_UTR_ch3<-gene_data[0,]
five_UTR_mit<-gene_data[0,]
three_UTR_ch1<-gene_data[0,]
three_UTR_ch2<-gene_data[0,]
three_UTR_ch3<-gene_data[0,]
three_UTR_mit<-gene_data[0,]
for(i in 1:41795){
if(gene_data[i,3]=="five_prime_UTR"){
if(gene_data[i,1]=="I")
five_UTR_ch1<-rbind(five_UTR_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
five_UTR_ch2<-rbind(five_UTR_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
five_UTR_ch3<-rbind(five_UTR_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
five_UTR_mit<-rbind(five_UTR_mit,gene_data[i,])
}
else if(gene_data[i,3]=="three_prime_UTR"){
if(gene_data[i,1]=="I")
three_UTR_ch1<-rbind(three_UTR_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
three_UTR_ch2<-rbind(three_UTR_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
three_UTR_ch3<-rbind(three_UTR_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
three_UTR_mit<-rbind(three_UTR_mit,gene_data[i,])
}
}
five_UTR_ch1<-gene_data[0,]
five_UTR_ch2<-gene_data[0,]
five_UTR_ch3<-gene_data[0,]
five_UTR_mit<-gene_data[0,]
three_UTR_ch1<-gene_data[0,]
three_UTR_ch2<-gene_data[0,]
three_UTR_ch3<-gene_data[0,]
three_UTR_mit<-gene_data[0,]
for(i in 1:41795){
if(gene_data[i,3]=="five_prime_UTR"){
if(gene_data[i,1]=="I")
five_UTR_ch1<-rbind(five_UTR_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
five_UTR_ch2<-rbind(five_UTR_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
five_UTR_ch3<-rbind(five_UTR_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
five_UTR_mit<-rbind(five_UTR_mit,gene_data[i,])
}
else if(gene_data[i,3]=="three_prime_UTR"){
if(gene_data[i,1]=="I")
three_UTR_ch1<-rbind(three_UTR_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
three_UTR_ch2<-rbind(three_UTR_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
three_UTR_ch3<-rbind(three_UTR_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
three_UTR_mit<-rbind(three_UTR_mit,gene_data[i,])
}
}
five_UTR_ch1<-five_UTR_ch1[order(five_UTR_ch1$start),]
five_UTR_ch1<-five_UTR_ch1[order(five_UTR_ch1$start),]
five_UTR_ch1<-five_UTR_ch1[order(five_UTR_ch1$start),]
five_UTR_ch1<-five_UTR_ch1[order(five_UTR_ch1$start),]
three_UTR_ch1<-three_UTR_ch1[order(three_UTR_ch1$start),]
three_UTR_ch1<-three_UTR_ch1[order(three_UTR_ch1$start),]
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlapping_gene.R')
CDS_ch1<-gene_data[0,]; CDS_ch2<-gene_data[0,]; CDS_ch3<-gene_data[0,]; CDS_mit<-gene_data[0,];
library(ape)
library(stringr)
library(writexl)
library(progress)
gene_data<-read.gff("Schizosaccharomyces_pombe_all_chromosomes.gff3")
CDS_ch1<-gene_data[0,]; CDS_ch2<-gene_data[0,]; CDS_ch3<-gene_data[0,]; CDS_mit<-gene_data[0,];
for(i in 1:41795){
if(gene_data[i,3]=="CDS" &
!str_detect(gene_data[i,9],'NCRNA') &!str_detect(gene_data[i,9],'TRNA')
&!str_detect(gene_data[i,9],'RRNA') &!str_detect(gene_data[i,9],'SNORNA')
&!str_detect(gene_data[i,9],'SNRNA')){
if(gene_data[i,1]=="I")
CDS_ch1<-rbind(CDS_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
CDS_ch2<-rbind(CDS_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
CDS_ch3<-rbind(CDS_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
CDS_mit<-rbind(CDS_mit,gene_data[i,])
}
}
overlap_cds_ch1<-find_overlapping_gene_UTR(CDS_ch1,CDS_ch1)
find_overlapping_gene_UTR<-function(x,y){
len_1<-nrow(x)-1
len_2<-nrow(y)-1
pb <- progress_bar$new(total = len_1)
result<-data.frame()
for(i in 1:len_1){
for(j in 1:len_2){
if((x[i,4]<y[j,4] & x[i,5]>y[j,4])|(x[i,4]<y[j,5]&x[i,5]>y[j,5])){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
else if(x[i,4]>y[j,4]&x[i,5]<y[j,5]){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
}
pb$tick()
}
result<-delete_duplicate_factor(result)
return(result)
}
overlap_cds_ch1<-find_overlapping_gene_UTR(CDS_ch1,CDS_ch1)
find_overlapping_gene_UTR<-function(x,y){
len_1<-nrow(x)-1
len_2<-nrow(y)-1
pb <- progress_bar$new(total = len_1)
result<-data.frame()
for(i in 1:len_1){
for(j in 1:len_2){
if(y[j,4]>x[i,5])
break
if((x[i,4]<y[j,4] & x[i,5]>y[j,4])|(x[i,4]<y[j,5]&x[i,5]>y[j,5])){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
else if(x[i,4]>y[j,4]&x[i,5]<y[j,5]){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
}
pb$tick()
}
result<-delete_duplicate_factor(result)
return(result)
}
find_overlapping_gene_UTR<-function(x,y){
x<-x[order(x$start),]
y<-x[order(y$start),]
len_1<-nrow(x)-1
len_2<-nrow(y)-1
pb <- progress_bar$new(total = len_1)
result<-data.frame()
for(i in 1:len_1){
for(j in 1:len_2){
if(y[j,4]>x[i,5])
break
if((x[i,4]<y[j,4] & x[i,5]>y[j,4])|(x[i,4]<y[j,5]&x[i,5]>y[j,5])){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
else if(x[i,4]>y[j,4]&x[i,5]<y[j,5]){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
}
pb$tick()
}
result<-delete_duplicate_factor(result)
return(result)
}
overlap_cds_ch1<-find_overlapping_gene_UTR(CDS_ch1,CDS_ch1)
delete_duplicate_factor<-function(x){
for(i in 1:(nrow(x)-1)){
ID_1<-unlist(strsplit(x[i,1], ":"))[1]
for(j in 1:(nrow(x)-1)){
ID_2<-unlist(strsplit(x[j,1], ":"))[1]
if(j==i) next
if(ID_1 == ID_2){
x<-x[-j,]
}
if((nrow(x)-1)==j) break
}
if((nrow(x)-1)<=i) break
}
return(x)
}
overlap_cds_ch1<-find_overlapping_gene_UTR(CDS_ch1,CDS_ch1)
find_overlapping_gene_UTR<-function(x,y){
x<-x[order(x$start),]
y<-x[order(y$start),]
len_1<-nrow(x)-1
len_2<-nrow(y)-1
pb <- progress_bar$new(total = len_1)
result<-data.frame()
for(i in 1:len_1){
for(j in 1:len_2){
if(y[j,4]>x[i,5])
break
if((x[i,4]<y[j,4] & x[i,5]>y[j,4])|(x[i,4]<y[j,5]&x[i,5]>y[j,5])){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
else if(x[i,4]>y[j,4]&x[i,5]<y[j,5]){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
}
pb$tick()
}
#result<-delete_duplicate_factor(result)
return(result)
}
overlap_cds_ch1<-find_overlapping_gene_UTR(CDS_ch1,CDS_ch1)
View(overlap_cds_ch1)
find_overlapping_gene_UTR<-function(x,y){
x<-x[order(x$start),]
y<-x[order(y$start),]
len_1<-nrow(x)-1
len_2<-nrow(y)-1
pb <- progress_bar$new(total = len_1)
result<-data.frame()
for(i in 1:len_1){
for(j in 1:len_2){
if(y[j,4]>x[i,5])
break
if((x[i,4]<y[j,4] & x[i,5]>y[j,4])|(x[i,4]<y[j,5]&x[i,5]>y[j,5])){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
else if(x[i,4]>y[j,4]&x[i,5]<y[j,5]){
result<-rbind(result,cbind(x[i,9],y[j,9],y[j,4]))
}
}
pb$tick()
}
#result<-delete_duplicate_factor(result)
return(result)
}
overlap_cds_ch1<-find_overlapping_gene_UTR(CDS_ch1,CDS_ch1)
View(overlap_cds_ch1)
find_overlapping_gene<-function(x){
len<-nrow(x)-1
pb <- progress_bar$new(total = len)
result<-data.frame()
for(i in 1:len){
if(x[i,5]>x[i+1,4]){
result<-rbind(result,cbind(x[i,9],x[i+1,9],x[i+1,4]))
}
pb$tick()
}
return(result)
}
CDS_ch1<-CDS_ch1[order(CDS_ch1$start),]
CDS_ch2<-CDS_ch2[order(CDS_ch2$start),]
CDS_ch3<-CDS_ch3[order(CDS_ch3$start),]
CDS_mit<-CDS_mit[order(CDS_mit$start),]
overlap_cds_ch2<-find_overlapping_gene(CDS_ch2)
overlap_cds_ch3<-find_overlapping_gene(CDS_ch3)
overlap_cds_mit<-find_overlapping_gene(CDS_mit)
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1)
five_UTR_ch1<-gene_data[0,]
five_UTR_ch2<-gene_data[0,]
five_UTR_ch3<-gene_data[0,]
five_UTR_mit<-gene_data[0,]
three_UTR_ch1<-gene_data[0,]
three_UTR_ch2<-gene_data[0,]
three_UTR_ch3<-gene_data[0,]
three_UTR_mit<-gene_data[0,]
for(i in 1:41795){
if(gene_data[i,3]=="five_prime_UTR"){
if(gene_data[i,1]=="I")
five_UTR_ch1<-rbind(five_UTR_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
five_UTR_ch2<-rbind(five_UTR_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
five_UTR_ch3<-rbind(five_UTR_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
five_UTR_mit<-rbind(five_UTR_mit,gene_data[i,])
}
else if(gene_data[i,3]=="three_prime_UTR"){
if(gene_data[i,1]=="I")
three_UTR_ch1<-rbind(three_UTR_ch1,gene_data[i,])
else if(gene_data[i,1]=="II")
three_UTR_ch2<-rbind(three_UTR_ch2,gene_data[i,])
else if(gene_data[i,1]=="III")
three_UTR_ch3<-rbind(three_UTR_ch3,gene_data[i,])
else if(gene_data[i,1]=="mitochondrial")
three_UTR_mit<-rbind(three_UTR_mit,gene_data[i,])
}
}
overlap_fUTR_ch1<-find_overlapping_gene_UTR(CDS_ch1,five_UTR_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlapping_gene.R')
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1,CDS_ch1)
overlap_cds_ch2<-find_overlapping_gene(CDS_ch2,CDS_ch2)
overlap_cds_ch3<-find_overlapping_gene(CDS_ch3,CDS_ch3)
overlap_cds_mit<-find_overlapping_gene(CDS_mit,CDS_mit)
library(ape)
library(stringr)
#library(dplyr)
library(writexl)
library(progress)
source('find_overlap_func.r')
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1,CDS_ch1)
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1,CDS_ch1)
overlap_cds_ch2<-find_overlapping_gene(CDS_ch2,CDS_ch2)
overlap_cds_ch3<-find_overlapping_gene(CDS_ch3,CDS_ch3)
overlap_cds_mit<-find_overlapping_gene(CDS_mit,CDS_mit)
save.image("C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/a.RData")
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_fUTR_ch1<-find_overlapping_gene(CDS_ch1,five_UTR_ch1)
overlap_fUTR_ch2<-find_overlapping_gene(CDS_ch2,five_UTR_ch2)
overlap_fUTR_ch3<-find_overlapping_gene(CDS_ch3,five_UTR_ch3)
overlap_fUTR_mit<-find_overlapping_gene(CDS_mit,five_UTR_mit)
overlap_tUTR_ch1<-find_overlapping_gene(CDS_ch1,three_UTR_ch1)
overlap_tUTR_ch2<-find_overlapping_gene(CDS_ch2,three_UTR_ch2)
overlap_tUTR_ch3<-find_overlapping_gene(CDS_ch3,three_UTR_ch3)
overlap_tUTR_mit<-find_overlapping_gene(CDS_mit,three_UTR_mit)
library(ape)
library(stringr)
#library(dplyr)
library(writexl)
library(progress)
source('find_overlap_func.r')
five_UTR_ch1<-subset(gene_data, seqid == "I" & type =="five_prime_UTR")
five_UTR_ch2<-subset(gene_data, seqid == "II" & type =="five_prime_UTR")
five_UTR_ch3<-subset(gene_data, seqid == "III" & type =="five_prime_UTR")
five_UTR_mit<-subset(gene_data, seqid == "mitochondrial" & type =="five_prime_UTR")
three_UTR_ch1<-subset(gene_data, seqid == "I" & type =="three_prime_UTR")
three_UTR_ch2<-subset(gene_data, seqid == "II" & type =="three_prime_UTR")
three_UTR_ch3<-subset(gene_data, seqid == "III" & type =="three_prime_UTR")
three_UTR_mit<-subset(gene_data, seqid == "mitochondrial" & type =="three_prime_UTR")
overlap_fUTR_ch1<-find_overlapping_gene(CDS_ch1,five_UTR_ch1)
overlap_fUTR_ch2<-find_overlapping_gene(CDS_ch2,five_UTR_ch2)
overlap_fUTR_ch3<-find_overlapping_gene(CDS_ch3,five_UTR_ch3)
overlap_fUTR_mit<-find_overlapping_gene(CDS_mit,five_UTR_mit)
overlap_tUTR_ch1<-find_overlapping_gene(CDS_ch1,three_UTR_ch1)
overlap_tUTR_ch2<-find_overlapping_gene(CDS_ch2,three_UTR_ch2)
overlap_tUTR_ch3<-find_overlapping_gene(CDS_ch3,three_UTR_ch3)
overlap_tUTR_mit<-find_overlapping_gene(CDS_mit,three_UTR_mit)
library(ape)
install.packages("ape")
install.packages("stringr")
install.packages("writexl")
install.packages("progress")
install.packages("dplyr")
install.packages("ape")
install.packages("ape")
install.packages("stringr")
install.packages("writexl")
install.packages("progress")
install.packages("dplyr")
library(ape)
library(stringr)
#library(dplyr)
library(writexl)
library(progress)
source('find_overlap_func.r')
gene_data<-read.gff("Schizosaccharomyces_pombe_all_chromosomes.gff3") #data
GSprimer<-read.table("GSprimerPos.tsv", sep = "\t")
load("C:/Users/홍은주/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/.RData")
write_xlsx(overlap_cds_ch1,"over_cds_ch1.xlsx")
write_xlsx(overlap_cds_ch1,"over_cds_ch1.xlsx")
write_xlsx(overlap_cds_ch2,"over_cds_ch2.xlsx")
write_xlsx(overlap_cds_ch3,"over_cds_ch3.xlsx")
write_xlsx(overlap_cds_mit,"over_cds_mit.xlsx")
write_xlsx(overlap_fUTR_ch1,"over_5utr_ch1.xlsx")
write_xlsx(overlap_fUTR_ch2,"over_5utr_ch2.xlsx")
write_xlsx(overlap_fUTR_ch3,"over_5utr_ch3.xlsx")
write_xlsx(overlap_fUTR_mit,"over_5utr_mit.xlsx")
write_xlsx(overlap_tUTR_ch1,"over_3utr_ch1.xlsx")
write_xlsx(overlap_tUTR_ch2,"over_3utr_ch2.xlsx")
write_xlsx(overlap_tUTR_ch3,"over_3utr_ch3.xlsx")
write_xlsx(overlap_tUTR_mit,"over_3utr_mit.xlsx")
utr5_overlap<-mget(ls(pattern = "overlap_fUTR_"))
utr3_overlap<-mget(ls(pattern = "overlap_tUTR_"))
Bprimer<-read.table("bPrimerPos2.tsv", ssep = "\t")
Bprimer<-read.table("bPrimerPos2.tsv", sep = "\t")
View(GSprimer)
SERIALprimer<-read.table("serialPrimerPos2.tsv")
View(SERIALprimer)
View(utr3_overlap)
utr3_overlap[["overlap_tUTR_ch1"]][["V1"]]
c("ID","c-id","match","ch","up_start","up_end","up_strand","up")
colnames(GSprimer)<-c("ID","c-id","up_match","u_ch","up_start","up_end","up_strand","down_match","d_ch","down_start","down_end","down_strand")
View(GSprimer)
five_UTR_ch1<-subset(GSprimer, u_ch == "I")
five_UTR_ch1<-subset(gene_data, seqid == "I" & type =="five_prime_UTR")
GS_ch1<-subset(GSprimer, u_ch == "I")
View(GS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
reverse_negative_strand(GS_ch1[1,])
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
reverse_negative_strand(GS_ch1[1,])
install.packages("seqinr")
library(seqinr)
reverse_negative_strand(GS_ch1[1,])
View(GS_ch1)
gs_test<-reverse_negative_strand(GS_ch1[1,])
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-reverse_negative_strand(GS_ch1[1,])
View(GSprimer)
View(gs_test)
gs_test<-as.data.frame(apply(GS_ch1, 1, reverse_negative_strand))
gs_test<-as.data.frame(apply(GS_ch1, 2, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, 1, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
gs_test<-as.data.frame(apply(GS_ch1, 1,reverse_negative_strand))
gs_test<-as.data.frame(apply(GS_ch1, 1,reverse_negative_strand))
View(gs_test)
gs_test_trans = t(gs_test)
View(gs_test_trans)
gs_test<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand))))
q
gs_test<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(gs_test)
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(GS_ch1)
GS_ch2<-subset(GSprimer, u_ch == "II")
GS_ch2<-(as.data.frame(t(as.data.frame(apply(GS_ch2, 1,reverse_negative_strand)))))
GS_ch3<-subset(GSprimer, u_ch == "III")
GS_ch3<-(as.data.frame(t(as.data.frame(apply(GS_ch3, 1,reverse_negative_strand)))))
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
install.packages("ape")
install.packages("stringr")
install.packages("writexl")
install.packages("progress")
install.packages("dplyr")
install.packages("seqinr")
library(ape)
library(stringr)
#library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(overlap_strand_gs)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
GS_ch1_t<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_uptag_neg)))))
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
GS_ch1_t<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_uptag_neg)))))
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
View(x)
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(GS_ch2)
View(GS_ch1)
GS_ch1<-subset(GSprimer, u_ch == "I")
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(GS_ch1)
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
View(GS_ch1)
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch3<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "III"),
1,reverse_negative_strand)))))
View(GSprimer)
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(overlap_strand_gs)
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
View(y)
View(GS_ch1)
View(GSprimer)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
