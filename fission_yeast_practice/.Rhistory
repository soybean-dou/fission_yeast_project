View(GS_ch1)
gs_test<-reverse_negative_strand(GS_ch1[1,])
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-reverse_negative_strand(GS_ch1[1,])
View(GSprimer)
View(gs_test)
gs_test<-as.data.frame(apply(GS_ch1, 1, reverse_negative_strand))
gs_test<-as.data.frame(apply(GS_ch1, 2, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, 1, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
gs_test<-as.data.frame(lapply(GS_ch1, reverse_negative_strand))
gs_test<-as.data.frame(apply(GS_ch1, 1,reverse_negative_strand))
gs_test<-as.data.frame(apply(GS_ch1, 1,reverse_negative_strand))
View(gs_test)
gs_test_trans = t(gs_test)
View(gs_test_trans)
gs_test<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand))))
q
gs_test<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(gs_test)
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(GS_ch1)
GS_ch2<-subset(GSprimer, u_ch == "II")
GS_ch2<-(as.data.frame(t(as.data.frame(apply(GS_ch2, 1,reverse_negative_strand)))))
GS_ch3<-subset(GSprimer, u_ch == "III")
GS_ch3<-(as.data.frame(t(as.data.frame(apply(GS_ch3, 1,reverse_negative_strand)))))
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
install.packages("ape")
install.packages("stringr")
install.packages("writexl")
install.packages("progress")
install.packages("dplyr")
install.packages("seqinr")
library(ape)
library(stringr)
#library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(overlap_strand_gs)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
GS_ch1_t<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_uptag_neg)))))
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
GS_ch1_t<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_uptag_neg)))))
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
View(x)
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(GS_ch2)
View(GS_ch1)
GS_ch1<-subset(GSprimer, u_ch == "I")
GS_ch1<-(as.data.frame(t(as.data.frame(apply(GS_ch1, 1,reverse_negative_strand)))))
View(GS_ch1)
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
View(GS_ch1)
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch3<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "III"),
1,reverse_negative_strand)))))
View(GSprimer)
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
debugSource('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
source('C:/Users/EunJu/OneDrive - dongguk.edu/DGU/2020_7/개별연구/fisson_yeast_practice/find_overlap_func.r')
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(overlap_strand_gs)
overlap_strand_gs<-find_overlapping_gene(GS_ch1,CDS_ch1)
View(x)
View(y)
View(GS_ch1)
View(GSprimer)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch2 <- type.convert(GS_ch2, as.is = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
View(overlap_strand_gs2)
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch2 <- type.convert(GS_ch2, as.is = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
View(gene_data)
View(overlap_strand_gs)
View(overlap_strand_gs)
source('find_overlap_func.r')
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch2 <- type.convert(GS_ch2, as.is = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch2 <- type.convert(GS_ch2, as.is = TRUE)
View(GS_ch2)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
source('find_overlap_func.r')
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
View(overlap_strand_gs2)
source('find_overlap_func.r')
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2,
x_start_name = "up_start", x_end_name = "down_end", is_strain = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_ch1,x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
View(GS_ch1)
View(overlap_strand_gs1)
overlap_starnd_gs1<-delete_duplicate(overlap_starnd_gs1)
View(overlap_strand_gs1)
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_starnd_gs1<-delete_duplicate(overlap_starnd_gs1)
overlap_starnd_gs1<-delete_duplicate(overlap_starnd_gs1)
delete_duplicate<-function(x){
i<-1
while(i<nrow(x)){
if(x[i,1]==x[i,2])
x<-x[-i,]
# j<-1
# while(j<=nrow(overlap_strand_gs2)){
#     if(j==i){ j<-j+1; next; }
#     if(overlap_strand_gs2[i,1] == overlap_strand_gs2[j,1]){
#         overlap_strand_gs2<-overlap_strand_gs2[-j,]
#     }
#     j<-j+1
# }
i<-i+1
}
}
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
source('find_overlap_func.r')
overlap_starnd_gs1<-delete_duplicate(overlap_starnd_gs1)
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
GS_ch1 <- type.convert(GS_ch1, as.is = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_ch1,x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_ch1,x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
GS_ch1 <- type.convert(GS_ch1, as.is = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_ch1,x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
source('find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_ch1,x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
View(x)
if(x[i,1]==x[i,2]){
x<-x[-i,]
if(x[i,1]==x[i,2]){
x<-x[-i,]
c
n
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
GS_ch1<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "I"),
1,reverse_negative_strand)))))
GS_ch1 <- type.convert(GS_ch1, as.is = TRUE)
GS_ch2<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "II"),
1,reverse_negative_strand)))))
GS_ch2 <- type.convert(GS_ch2, as.is = TRUE)
GS_ch3<-(as.data.frame
(t(as.data.frame(apply(subset(GSprimer, u_ch == "III"),
1,reverse_negative_strand)))))
GS_ch3 <- type.convert(GS_ch3, as.is = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_ch1,x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
View(overlap_strand_gs1)
overlap_starnd_gs1<-delete_duplicate(overlap_stand_gs1)
overlap_starnd_gs1<-delete_duplicate(overlap_strand_gs1)
View(overlap_starnd_gs1)
overlap_starnd_gs1<-delete_duplicate(overlap_strand_gs1)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2, x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
View(overlap_strand_gs1)
overlap_strand_gs1<-delete_duplicate(overlap_strand_gs1)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_ch2, x_start_name = "up_start",
x_end_name = "down_end", is_strain = TRUE)
overlap_strand_gs1<-delete_duplicate(overlap_strand_gs1)
View(overlap_strand_gs1)
overlap_strand_gs1<-delete_duplicate(overlap_strand_gs1)
View(overlap_strand_gs1)
overlap_strand_gs1<-delete_duplicate(overlap_strand_gs1)
overlap_strand_gs1<-delete_duplicate(overlap_strand_gs1)
View(overlap_strand_gs)
View(overlap_strand_gs1)
View(CDS_ch1)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
GS_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
colnames(GSprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2")
GS_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
CDS_site<-mget(ls(pattern = "CDS_"))
CDS_overlap<-mget(ls(pattern = "overlap_cds_"))
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
CDS_overlap<-mget(ls(pattern = "overlap_cds_"))
View(CDS_overlap)
View(overlap_strand_gs1)
View(CDS_ch1)
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1,CDS_ch1,is_same = TRUE)
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1,CDS_ch1,is_same = TRUE)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_cds_ch1<-find_overlapping_gene(CDS_ch1,CDS_ch1,is_same = TRUE)
overlap_cds_ch2<-find_overlapping_gene(CDS_ch2,CDS_ch2,is_same = TRUE)
overlap_cds_ch3<-find_overlapping_gene(CDS_ch3,CDS_ch3,is_same = TRUE)
overlap_cds_mit<-find_overlapping_gene(CDS_mit,CDS_mit,is_same = TRUE)
View(overlap_cds_ch1)
View(overlap_cds_ch2)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
if(is_same==TRUE & i==j)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
View(overlap_strand_gs2)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
write_xlsx(CDS_overlap[i],file_name)
GS_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
View(overlap_strand_gs1)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
View(overlap_strand_gs2)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
View(overlap_strand_gs1)
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
View(y)
View(x)
if(is_strain){
ID<-"ID"
}else{ ID <-"attributes" }
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
View(result)
View(result)
debugSource('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
B_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start3", up_end="end3",
down_start="start4", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
GSprimer<-read.table("GSprimerPos.tsv", sep = "\t")
Bprimer<-read.table("bPrimerPos2.tsv", sep = "\t")
GSprimer<-read.table("GSprimerPos.tsv", sep = "\t")
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
#----------------------fission yeast data--------------------------
gene_data<-read.gff("Schizosaccharomyces_pombe_all_chromosomes.gff3")
GSprimer<-read.table("GSprimerPos.tsv", sep = "\t")
Bprimer<-read.table("bPrimerPos2.tsv", sep = "\t")
SERIALprimer<-read.table("serialPrimerPos2.tsv")
colnames(GSprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2")
colnames(Bprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2",
"match3","chr3","start3","end3","strand3",
"match4","chr4","start4","end4","strand4",
"match5","chr5","start5","end5","strand5",
"match6","chr6","start6","end6","strand6")
GSprimer<-read.table("GSPrimerPos.tsv", sep = "\t")
Bprimer<-read.table("bPrimerPos2.tsv", sep = "\t")
SERIALprimer<-read.table("serialPrimerPos2.tsv")
colnames(GSprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2")
colnames(Bprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2",
"match3","chr3","start3","end3","strand3",
"match4","chr4","start4","end4","strand4",
"match5","chr5","start5","end5","strand5",
"match6","chr6","start6","end6","strand6")
B_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start3", up_end="end3",
down_start="start4", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
#--finding overlapping site
overlap_strand_B1<-find_overlapping_gene(B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
View(overlap_strand_B1)
View(overlap_strand_B1)
B_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
B_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
overlap_strand_B2<-find_overlapping_gene(B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B3<-find_overlapping_gene(B_ch3,CDS_site$CDS_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
write_xlsx(overlap_strand_gs1,"B_overlap_1.xlsx")
write_xlsx(overlap_strand_B1,"B_overlap_1.xlsx")
write_xlsx(overlap_strand_B1,"B_overlap_1.xlsx")
