x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
GS_CDS<-mget(ls(pattern = "ch"))
ch1<-find_overlapping_gene(Block$B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch2<-find_overlapping_gene(Block$B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch1<-find_overlapping_gene(Block$B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch2<-find_overlapping_gene(Block$B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch3<-find_overlapping_gene(Block$B_ch3,CDS_site$CDS_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
B_CDS<-mget(ls(pattern = "ch"))
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
ch1<-find_overlapping_gene(Serial$S_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
ch2<-find_overlapping_gene(Serial$S_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
ch3<-find_overlapping_gene(Serial$S_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
S_CDS<-mget(ls(pattern = "ch"))
overlap_cds_ch1<-rbind(GS_CDS$ch1,B_CDS$ch1,S_CDS$ch1)
overlap_cds_ch1<-overlap_cds_ch1[order(overlap_cds_ch1$V1),]
strain_name<-overlap_cds_ch1$V1
i=1;j=1;
as.numeric(length(strain_name))
while(i<as.numeric(length(strain_name))){
j=1;
while(j<length(strain_name)){
if(i==j){
j<-j+1
next
}
if(strain_name[i]==strain_name[j]){
strain_name<-strain_name[-j]
}
print(j)
j<-j+1
}
print(i)
i<-i+1
}
cds_matrix<-matrix(ncol=80,nrow=69)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:80){
cds_matrix[overlap_cds_ch1[i,1],overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
cds_matrix
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix,color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
reverse_uptag_neg<-function(x){
if(x["strand1"] == "-"){
swap(x["start3"],x["start4"])
swap(x["end3"],x["end4"])
}
return(x)
}
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
overlap_strand_UTR_B1<-find_overlapping_gene(Block$B_ch1,five_UTR$five_UTR_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_UTR_B2<-find_overlapping_gene(Block$B_ch2,five_UTR$five_UTR_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_UTR_B3<-find_overlapping_gene(Block$B_ch3,five_UTR$five_UTR_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
B_5utr<-mget(ls(pattern = "overlap_starnd_UTR_B"))
ch1<-find_overlapping_gene(Block$B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch2<-find_overlapping_gene(Block$B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch3<-find_overlapping_gene(Block$B_ch3,CDS_site$CDS_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
B_CDS<-mget(ls(pattern = "ch"))
overlap_cds_ch1<-rbind(GS_CDS$ch1,B_CDS$ch1,S_CDS$ch1)
overlap_cds_ch1<-overlap_cds_ch1[order(overlap_cds_ch1$V1),]
strain_name<-overlap_cds_ch1$V1
i=1;j=1;
as.numeric(length(strain_name))
while(i<as.numeric(length(strain_name))){
j=1;
while(j<length(strain_name)){
if(i==j){
j<-j+1
next
}
if(strain_name[i]==strain_name[j]){
strain_name<-strain_name[-j]
}
print(j)
j<-j+1
}
print(i)
i<-i+1
}
cds_matrix<-matrix(ncol=80,nrow=69)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:80){
cds_matrix[overlap_cds_ch1[i,1],overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
cds_matrix
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix,color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
View(GS_overlap)
View(GSprimer)
View(SERIALprimer)
View(Block)
View(Block[["B_ch1"]])
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
ch1<-find_overlapping_gene(Block$B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch2<-find_overlapping_gene(Block$B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch3<-find_overlapping_gene(Block$B_ch3,CDS_site$CDS_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
B_CDS<-mget(ls(pattern = "ch"))
install.packages("pheatmap")
library(pheatmap)
overlap_cds_ch1<-rbind(GS_CDS$ch1,B_CDS$ch1,S_CDS$ch1)
overlap_cds_ch1<-overlap_cds_ch1[order(overlap_cds_ch1$V1),]
strain_name<-overlap_cds_ch1$V1
i=1;j=1;
as.numeric(length(strain_name))
while(i<as.numeric(length(strain_name))){
j=1;
while(j<length(strain_name)){
if(i==j){
j<-j+1
next
}
if(strain_name[i]==strain_name[j]){
strain_name<-strain_name[-j]
}
print(j)
j<-j+1
}
print(i)
i<-i+1
}
cds_matrix<-matrix(ncol=80,nrow=69)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:80){
cds_matrix[overlap_cds_ch1[i,1],overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
cds_matrix
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix,color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
p <- pheatmap(cds_matrix,color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
cds_matrix
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
install.packages("pheatmap")
ch1<-find_overlapping_gene(Block$ch1,CDS$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
library(RColorBrewer)
source('find_overlap_func.r')
gene_data<-read.gff("Schizosaccharomyces_pombe_all_chromosomes.gff3")
GSprimer<-read.table("GSPrimerPos.tsv", sep = "\t")
Bprimer<-read.table("bPrimerPos2.tsv", sep = "\t")
SERIALprimer<-read.table("serialPrimerPos2.tsv")
colnames(GSprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2")
colnames(Bprimer)<-c("ID","c-id","match1","chr1","start1","end1","strand1",
"match2","chr2","start2","end2","strand2",
"match3","chr3","start3","end3","strand3",
"match4","chr4","start4","end4","strand4",
"match5","chr5","start5","end5","strand5",
"match6","chr6","start6","end6","strand6")
colnames(SERIALprimer)<-c("ID","c-id","sequence1","match1","chr1","start1","end1","strand1",
"sequence2","match2","chr2","start2","end2","strand2",
"match3","chr3","start3","end3","strand3",
"match4","chr4","start4","end4","strand4")
Bprimer<-transform(Bprimer, start5 = as.numeric(start5), end5 = as.numeric(end5),
start6 = as.numeric(start6),end6 = as.numeric(end6))
CDS<-mget(ls(pattern = "CDS_"))
ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS<-mget(ls(pattern = "ch"))
ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start3", up_end="end3",
down_start="start4", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
ch1 <- na.omit(B_ch1)
ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start3", up_end="end4",
down_start="start3", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start3", up_end="end4",
down_start="start3", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
Block<-mget(ls(pattern = "ch"))
ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(SERIALprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(SERIALprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(SERIALprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
Serial<-mget(ls(pattern = "ch"))
ch1<-find_overlapping_gene(GS$ch1, CDS$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
GS_CDS<-mget(ls(pattern = "ch1"))
ch1<-find_overlapping_gene(Block$ch1,CDS$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
B_CDS<-mget(ls(pattern = "ch1"))
ch1<-find_overlapping_gene(Serial$ch1,CDS$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
S_CDS<-mget(ls(pattern = "ch1"))
library(pheatmap)
overlap_cds_ch1<-rbind(GS_CDS$ch1,B_CDS$ch1,S_CDS$ch1)
overlap_cds_ch1<-overlap_cds_ch1[order(overlap_cds_ch1$V1),]
strain_name<-overlap_cds_ch1$V1
i=1;
j=1;
as.numeric(length(strain_name))
while(i<as.numeric(length(strain_name))){
j=1;
while(j<length(strain_name)){
if(i==j){
j<-j+1
next
}
if(strain_name[i]==strain_name[j]){
strain_name<-strain_name[-j]
}
print(j)
j<-j+1
}
print(i)
i<-i+1
}
cds_matrix<-matrix(ncol=79,nrow=68)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:68){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
cds_matrix
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
View(cds_matrix)
cds_matrix[x<0]<-as.numeric(0)
cds_matrix[if(x<0)]<-as.numeric(0)
cds_matrix<-matrix(ncol=79,nrow=68)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:68){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
cds_matrix[]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
cds_matrix
cds_matrix[]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
cds_matrix[]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
View(p)
cds_matrix<-matrix(ncol=79,nrow=68)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:68){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
cds_matrix
cds_matrix[]<-as.numeric(0)
cds_matrix
heatmap(cds_matrix)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
for(i in 1:68){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("pink", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("blue", "navy"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("pink", "red"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight")
cds_matrix<-matrix(ncol=79,nrow=68)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:68){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight", na_col = "white")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("gray", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "S.pombes deletion library-CDS weight", na_col = "white")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("gray", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
for(i in 1:68){
#if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
#}
}
p <- pheatmap(cds_matrix, color = colorRampPalette(c("gray", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
for(i in 1:68){
#if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
#}
}
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("gray", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
cds_matrix<-matrix(ncol=79,nrow=68)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:68){
#if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
#}
}
p <- pheatmap(cds_matrix, color = colorRampPalette(c("gray", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
ch1<-find_overlapping_gene(Block$ch1,CDS$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start3", up_end="end3",
down_start="start4", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
View(ch1)
source('~/fission_yeast_project/fission_yeast_practice/find_overlap_func.r')
ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start3", up_end="end3",
down_start="start4", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
ch1 <- na.omit(B_ch1)
ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start3", up_end="end4",
down_start="start3", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start3", up_end="end4",
down_start="start3", down_end="end4",
up_strand="strand3", down_strand="strand4"))))), as.is = TRUE)
Block<-mget(ls(pattern = "ch"))
ch1<-find_overlapping_gene(Block$ch1,CDS$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
B_CDS<-mget(ls(pattern = "ch1"))
overlap_cds_ch1<-rbind(GS_CDS$ch1,B_CDS$ch1,S_CDS$ch1)
overlap_cds_ch1<-overlap_cds_ch1[order(overlap_cds_ch1$V1),]
strain_name<-overlap_cds_ch1$V1
i=1;
j=1;
as.numeric(length(strain_name))
while(i<as.numeric(length(strain_name))){
j=1;
while(j<length(strain_name)){
if(i==j){
j<-j+1
next
}
if(strain_name[i]==strain_name[j]){
strain_name<-strain_name[-j]
}
print(j)
j<-j+1
}
print(i)
i<-i+1
}
cds_matrix<-matrix(ncol=80,nrow=69)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:80){
#if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
#}
}
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("gray", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
for(i in 1:80){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
cds_matrix<-matrix(ncol=80,nrow=69)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:80){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
cds_matrix
cds_matrix[is.na(cds_matrix)]<-as.numeric(0)
heatmap(cds_matrix)
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "black"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("red", "blue"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
p <- pheatmap(cds_matrix, color = colorRampPalette(c("white", "blue"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
cds_matrix<-matrix(ncol=80,nrow=69)
rownames(cds_matrix)<-strain_name
colnames(cds_matrix)<-overlap_cds_ch1$V2
for(i in 1:80){
if(as.numeric(overlap_cds_ch1[i,4])>=0){
cds_matrix[overlap_cds_ch1[i,1], overlap_cds_ch1[i,2]]<-as.numeric(overlap_cds_ch1[i,4])
}
}
p <- pheatmap(cds_matrix, color = colorRampPalette(c("skyblue", "blue"))(100),
cluster_row = FALSE, cluster_cols = F, main = "Strain-CDS overlap percent", na_col = "white")
ch1<-find_overlapping_gene(Block$ch1,CDS$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE, b_primer=T)
View(ch1)
