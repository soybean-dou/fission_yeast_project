for(j in 1:nrow(GS_overlap[[i]])){
overlap_matrix[[i]][GS_overlap[[i]][j,1], GS_overlap[[i]][j,2]]<-1
}
}
for(i in 1:2){
for(j in 1:nrow(S_overlap[[i]])){
overlap_matrix[[i]][S_overlap[[i]][j,1], S_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
for(j in 1:nrow(B_overlap[[i]])){
overlap_matrix[[i]][B_overlap[[i]][j,1], B_overlap[[i]][j,2]]<-1
}
}
View(overlap_matrix)
overlap_matrix[["overlap_matrix_ch1"]]
View(overlap_matrix[["overlap_matrix_ch1"]])
sum(is.na(overlap_matrix$overlap_matrix_ch1))
sum(!is.na(overlap_matrix$overlap_matrix_ch1))
gene_id<-read.table("gene_IDs_names.tsv", sep = "\t")
gene_id_ch1 <- gene_id[1:2344,1]
gene_id_ch2 <- gene_id[1:1880,2]
gene_id_ch3 <- gene_id[1:927,3]
overlap_matrix_ch1<-setNames(data.frame(matrix(ncol = 2344, nrow = 2232)), gene_id_ch1)
overlap_matrix_ch2<-setNames(data.frame(matrix(ncol = 1880, nrow = 1808)), gene_id_ch2)
overlap_matrix_ch3<-setNames(data.frame(matrix(ncol = 927, nrow = 874)), gene_id_ch3)
gene_id_list<-mget(ls(pattern = "gene_id_"))
overlap_matrix<-mget(ls(pattern = "overlap_matrix_"))
gene_id_list<-mget(ls(pattern = "gene_id_"))
strain_id_list<-mget(ls(pattern = "strain_id_"))
View(gene_id_list)
gene_id_list[["gene_id_ch1"]]
strain_id_list<-mget(ls(pattern = "strain_id_"))
for(i in 1:3){
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
}
}
for(i in 1:3){
pb <- progress_bar$new(total = len_1)
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
}
pb$tick()
}
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
}
pb$tick()
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
}
pb$tick()
}
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
}
pb$tick()
}
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
pb$tick()
}
}
sum(!is.na(overlap_matrix$overlap_matrix_ch1))
View(overlap_matrix[["overlap_matrix_ch1"]])
library(xlsx)
library(highcharter)
library(tidyr)
library(dplyr)
gene_id<-read.table("gene_IDs_names.tsv", sep = "\t")
gene_id_ch1 <- gene_id[1:2344,1]
gene_id_ch2 <- gene_id[1:1880,2]
gene_id_ch3 <- gene_id[1:927,3]
strain_id<-read.xlsx2('strain_id.xlsx',sheetIndex=1,header=F)
strain_id_ch1 <- strain_id[1:2232,1]
strain_id_ch2 <- strain_id[1:1808,2]
strain_id_ch3 <- strain_id[1:874,3]
#overlap_matrix<-setNames(data.frame(matrix(ncol = 6998, nrow = 4914)), gene_id)
overlap_matrix_ch1<-setNames(data.frame(matrix(ncol = 2344, nrow = 2232)), gene_id_ch1)
overlap_matrix_ch2<-setNames(data.frame(matrix(ncol = 1880, nrow = 1808)), gene_id_ch2)
overlap_matrix_ch3<-setNames(data.frame(matrix(ncol = 927, nrow = 874)), gene_id_ch3)
rownames(overlap_matrix_ch1)<-strain_id_ch1
rownames(overlap_matrix_ch2)<-strain_id_ch2
rownames(overlap_matrix_ch3)<-strain_id_ch3
overlap_matrix<-mget(ls(pattern = "overlap_matrix_"))
gene_id_list<-mget(ls(pattern = "gene_id_"))
strain_id_list<-mget(ls(pattern = "strain_id_"))
for(i in 1:3){
for(j in 1:nrow(GS_overlap[[i]])){
overlap_matrix[[i]][GS_overlap[[i]][j,1], GS_overlap[[i]][j,2]]<-1
}
}
for(i in 1:2){
for(j in 1:nrow(S_overlap[[i]])){
overlap_matrix[[i]][S_overlap[[i]][j,1], S_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
for(j in 1:nrow(B_overlap[[i]])){
overlap_matrix[[i]][B_overlap[[i]][j,1], B_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
pb$tick()
}
}
View(overlap_matrix[["overlap_matrix_ch1"]])
library(highcharter)
hchart(overlap_matrix$overlap_matrix_ch1, "heatmap", hcaes(x = variable, y = name, value = value)) %>%
hc_colorAxis(stops = color_stops(2, c("red","green")))
View(overlap_matrix[["overlap_matrix_ch1"]])
hchart(overlap_matrix$overlap_matrix_ch1, "heatmap") %>%
hc_colorAxis(stops = color_stops(2, c("red","green")))
overlap_matrix$overlap_matrix_ch1[is.na(overlap_matrix$overlap_matrix_ch1)] <- 0
View(overlap_matrix)
View(overlap_matrix[["overlap_matrix_ch1"]])
overlap_matrix$overlap_matrix_ch1[is.na(overlap_matrix$overlap_matrix_ch1)] <- 0
overlap_matrix$overlap_matrix_ch2[is.na(overlap_matrix$overlap_matrix_ch2)] <- 0
overlap_matrix$overlap_matrix_ch3[is.na(overlap_matrix$overlap_matrix_ch3)] <- 0
heatmap(overlap_matrix$overlap_matrix_ch1)
library(xlsx)
library(highcharter)
library(tidyr)
library(dplyr)
gene_id<-read.table("gene_IDs_names.tsv", sep = "\t")
gene_id_ch1 <- gene_id[1:2344,1]
gene_id_ch2 <- gene_id[1:1880,2]
gene_id_ch3 <- gene_id[1:927,3]
strain_id<-read.xlsx2('strain_id.xlsx',sheetIndex=1,header=F)
strain_id_ch1 <- strain_id[1:2232,1]
strain_id_ch2 <- strain_id[1:1808,2]
strain_id_ch3 <- strain_id[1:874,3]
#overlap_matrix<-setNames(data.frame(matrix(ncol = 6998, nrow = 4914)), gene_id)
overlap_matrix_ch1<-setNames(data.frame(matrix(ncol = 2344, nrow = 2232)), gene_id_ch1)
overlap_matrix_ch2<-setNames(data.frame(matrix(ncol = 1880, nrow = 1808)), gene_id_ch2)
overlap_matrix_ch3<-setNames(data.frame(matrix(ncol = 927, nrow = 874)), gene_id_ch3)
rownames(overlap_matrix_ch1)<-strain_id_ch1
rownames(overlap_matrix_ch2)<-strain_id_ch2
rownames(overlap_matrix_ch3)<-strain_id_ch3
overlap_matrix<-mget(ls(pattern = "overlap_matrix_"))
gene_id_list<-mget(ls(pattern = "gene_id_"))
strain_id_list<-mget(ls(pattern = "strain_id_"))
sum(!is.na(overlap_matrix$overlap_matrix))
for(i in 1:3){
for(j in 1:nrow(GS_overlap[[i]])){
overlap_matrix[[i]][GS_overlap[[i]][j,1], GS_overlap[[i]][j,2]]<-1
}
}
for(i in 1:2){
for(j in 1:nrow(S_overlap[[i]])){
overlap_matrix[[i]][S_overlap[[i]][j,1], S_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
for(j in 1:nrow(B_overlap[[i]])){
overlap_matrix[[i]][B_overlap[[i]][j,1], B_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
pb$tick()
}
}
sum(!is.na(overlap_matrix$overlap_matrix_ch1))
overlap_matrix$overlap_matrix_ch1[is.na(overlap_matrix$overlap_matrix_ch1)] <- 0
overlap_matrix$overlap_matrix_ch2[is.na(overlap_matrix$overlap_matrix_ch2)] <- 0
overlap_matrix$overlap_matrix_ch3[is.na(overlap_matrix$overlap_matrix_ch3)] <- 0
View(overlap_matrix)
View(overlap_matrix[["overlap_matrix_ch1"]])
gene_id<-read.table("gene_IDs_names.tsv", sep = "\t")
gene_id_ch1 <- gene_id[1:2344,1]
gene_id_ch2 <- gene_id[1:1880,2]
gene_id_ch3 <- gene_id[1:927,3]
strain_id<-read.xlsx2('strain_id.xlsx',sheetIndex=1,header=F)
strain_id_ch1 <- strain_id[1:2232,1]
strain_id_ch2 <- strain_id[1:1808,2]
strain_id_ch3 <- strain_id[1:874,3]
#overlap_matrix<-setNames(data.frame(matrix(ncol = 6998, nrow = 4914)), gene_id)
overlap_matrix_ch1<-setNames(data.frame(matrix(ncol = 2344, nrow = 2232)), gene_id_ch1)
overlap_matrix_ch2<-setNames(data.frame(matrix(ncol = 1880, nrow = 1808)), gene_id_ch2)
overlap_matrix_ch3<-setNames(data.frame(matrix(ncol = 927, nrow = 874)), gene_id_ch3)
rownames(overlap_matrix_ch1)<-strain_id_ch1
rownames(overlap_matrix_ch2)<-strain_id_ch2
rownames(overlap_matrix_ch3)<-strain_id_ch3
View(overlap_matrix[["overlap_matrix_ch1"]])
View(overlap_matrix)
overlap_matrix<-mget(ls(pattern = "overlap_matrix_"))
gene_id_list<-mget(ls(pattern = "gene_id_"))
strain_id_list<-mget(ls(pattern = "strain_id_"))
View(overlap_matrix)
for(i in 1:3){
for(j in 1:nrow(GS_overlap[[i]])){
overlap_matrix[[i]][GS_overlap[[i]][j,1], GS_overlap[[i]][j,2]]<-1
}
}
View(overlap_matrix)
for(i in 1:2){
for(j in 1:nrow(S_overlap[[i]])){
overlap_matrix[[i]][S_overlap[[i]][j,1], S_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
for(j in 1:nrow(B_overlap[[i]])){
overlap_matrix[[i]][B_overlap[[i]][j,1], B_overlap[[i]][j,2]]<-1
}
}
View(overlap_matrix)
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
pb$tick()
}
}
View(overlap_matrix)
View(overlap_matrix[["overlap_matrix_ch1"]])
overlap_matrix$overlap_matrix_ch1[is.na(overlap_matrix$overlap_matrix_ch1)] <- 0
overlap_matrix$overlap_matrix_ch2[is.na(overlap_matrix$overlap_matrix_ch2)] <- 0
overlap_matrix$overlap_matrix_ch3[is.na(overlap_matrix$overlap_matrix_ch3)] <- 0
write_xlsx(overlap_matrix$overlap_matrix_ch1,"overlap_matrix_ch1.xlsx")
overlap_strand_data<-c(nrow(GS_overlap[[1]]+nrow(B_overlap[[1]])+nrow(S_overlap[[1]]),
nrow(GS_overlap[[2]])+nrow(B_overlap[[2]])+nrow(S_overlap[[2]]),
nrow(GS_overlap[[3]])+nrow(B_overlap[[3]])+nrow(S_overlap[[3]])))
overlap_strand_data<-c(nrow(GS_overlap[[1]])+nrow(B_overlap[[1]])+nrow(S_overlap[[1]]),
nrow(GS_overlap[[2]])+nrow(B_overlap[[2]])+nrow(S_overlap[[2]]),
nrow(GS_overlap[[3]])+nrow(B_overlap[[3]])+nrow(S_overlap[[3]]))
as.data.frame(over_strand_data, row.names="ch1, ch2, ch3")
as.data.frame(overlap_strand_data, row.names="ch1, ch2, ch3")
as.data.frame(overlap_strand_data)
overlap_strand_data<-as.data.frame(overlap_strand_data)
coul <- brewer.pal(3, "Set3")
coul <- brewer.pal(3, "Set3")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
overlap_strand_data<-as.data.frame(overlap_strand_data)
overlap_strand_data
overlap_strand_data<-c(nrow(GS_overlap[[1]])+nrow(B_overlap[[1]])+nrow(S_overlap[[1]]),
nrow(GS_overlap[[2]])+nrow(B_overlap[[2]])+nrow(S_overlap[[2]]),
nrow(GS_overlap[[3]])+nrow(B_overlap[[3]])+nrow(S_overlap[[3]]))
coul <- brewer.pal(3, "Set3")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
coul <- brewer.pal(3, "Set4")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
coul <- brewer.pal(3, "Set1")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
layout(matrix(c(1),1,1))
layout.show(1)
coul <- brewer.pal(3, "Set1")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
coul <- brewer.pal(3, "Set1")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8,
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS ")
overlap_strand_data_mg<-data.frame(chromosome1=c(overlap_strand_data[1], nrow(GS_overlap[[1]]),nrow(B_overlap[[1]]),nrow(S_overlap[[1]])),
chromosome2=c(overlap_strand_data[2], nrow(GS_overlap[[2]])+nrow(B_overlap[[2]]),nrow(S_overlap[[2]])),
chromosome3=c(overlap_strand_data[3],nrow(GS_overlap[[3]]),nrow(B_overlap[[3]]),nrow(S_overlap[[3]])))
overlap_strand_data_mg<-data.frame(chromosome1=c(overlap_strand_data[1], nrow(GS_overlap[[1]]),nrow(B_overlap[[1]]),nrow(S_overlap[[1]])),
chromosome2=c(overlap_strand_data[2], nrow(GS_overlap[[2]])+nrow(B_overlap[[2]]),nrow(S_overlap[[2]])),
chromosome3=c(overlap_strand_data[3],nrow(GS_overlap[[3]]),nrow(B_overlap[[3]]),nrow(S_overlap[[3]])))
overlap_strand_data_mg<-data.frame(chromosome1=c(overlap_strand_data[1], nrow(GS_overlap[[1]]),nrow(B_overlap[[1]]),nrow(S_overlap[[1]])),
chromosome2=c(overlap_strand_data[2], nrow(GS_overlap[[2]]),nrow(B_overlap[[2]]),nrow(S_overlap[[2]])),
chromosome3=c(overlap_strand_data[3],nrow(GS_overlap[[3]]),nrow(B_overlap[[3]]),nrow(S_overlap[[3]])))
barplot(overlap_strand_data_mg, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
overlap_strand_data_mg
barplot(as.matrix(overlap_strand_data_mg), names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
barplot(as.matrix(overlap_strand_data_mg), names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
arplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,100),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
layout(matrix(c(1,2),1,2))
layout.show(1)
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
layout(matrix(c(1,2),1,2))
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between \ndeletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
View(CDS_site)
View(CDS_site)
overlap_strand_data_mg
View(overlap_type_data)
View(CDS_site)
View(ch1_overlap_type)
View(ch1_overlap_type[["ch1_convergent"]])
View(ch1_overlap_type[["ch1_divergent"]])
View(ch1_overlap_type[["ch1_tendom_3"]])
View(ch1_overlap_type[["ch1_tendom_5"]])
View(ch1_overlap_type[["ch1_divergent"]])
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="overlapping type",
ylab="choromosome",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
coul <- brewer.pal(4, "Set2")
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="overlapping type",
ylab="choromosome",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
ch1_overlap_type[["ch1_convergent"]][["V1"]]
install.packages("VennDiagram")
#-------------------------------------
library(VennDiagram)
overlap_type_data<-data.frame(chromosome1 = ch1_overlap_info, chromosome2=ch2_overlap_info, chromosome3=ch3_overlap_info)
overlap_type_data
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="overlapping type",
ylab="choromosome",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
View(overlap_matrix_ch1)
View(overlap_matrix)
View(overlap_matrix[["overlap_matrix_ch1"]])
overlap_matrix_ch1<-data.matrix(overlap_matrix$overlap_matrix_ch1)
View(overlap_matrix_ch1)
overlap_heatmap <- heatmap(overlap_matrix_ch1, Rowv=NA, Colv=NA, col=cm.colors(256), scale="row", margin=c(5,10))
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
library(RColorBrewer)
overlap_heatmap <- heatmap(overlap_matrix_ch1, Rowv=NA, Colv=NA, col=col=brewer.pal(9, "Blues"), scale="row", margin=c(5,10))
overlap_heatmap <- heatmap(overlap_matrix_ch1, Rowv=NA, Colv=NA, col=brewer.pal(9, "Blues"), scale="row", margin=c(5,10))
