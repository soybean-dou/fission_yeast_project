rownames(overlap_matrix_ch1)<-strain_id_ch1
rownames(overlap_matrix_ch2)<-strain_id_ch2
rownames(overlap_matrix_ch3)<-strain_id_ch3
View(overlap_matrix[["overlap_matrix_ch1"]])
View(overlap_matrix)
overlap_matrix<-mget(ls(pattern = "overlap_matrix_"))
gene_id_list<-mget(ls(pattern = "gene_id_"))
strain_id_list<-mget(ls(pattern = "strain_id_"))
View(overlap_matrix)
for(i in 1:3){
for(j in 1:nrow(GS_overlap[[i]])){
overlap_matrix[[i]][GS_overlap[[i]][j,1], GS_overlap[[i]][j,2]]<-1
}
}
View(overlap_matrix)
for(i in 1:2){
for(j in 1:nrow(S_overlap[[i]])){
overlap_matrix[[i]][S_overlap[[i]][j,1], S_overlap[[i]][j,2]]<-1
}
}
for(i in 1:3){
for(j in 1:nrow(B_overlap[[i]])){
overlap_matrix[[i]][B_overlap[[i]][j,1], B_overlap[[i]][j,2]]<-1
}
}
View(overlap_matrix)
for(i in 1:3){
pb <- progress_bar$new(total = length(strain_id_list[[i]]))
for(j in 1:length(strain_id_list[[i]])){
overlap_matrix[[i]][strain_id_list[[i]][j], strain_id_list[[i]][j]]<-1
pb$tick()
}
}
View(overlap_matrix)
View(overlap_matrix[["overlap_matrix_ch1"]])
overlap_matrix$overlap_matrix_ch1[is.na(overlap_matrix$overlap_matrix_ch1)] <- 0
overlap_matrix$overlap_matrix_ch2[is.na(overlap_matrix$overlap_matrix_ch2)] <- 0
overlap_matrix$overlap_matrix_ch3[is.na(overlap_matrix$overlap_matrix_ch3)] <- 0
write_xlsx(overlap_matrix$overlap_matrix_ch1,"overlap_matrix_ch1.xlsx")
overlap_strand_data<-c(nrow(GS_overlap[[1]]+nrow(B_overlap[[1]])+nrow(S_overlap[[1]]),
nrow(GS_overlap[[2]])+nrow(B_overlap[[2]])+nrow(S_overlap[[2]]),
nrow(GS_overlap[[3]])+nrow(B_overlap[[3]])+nrow(S_overlap[[3]])))
overlap_strand_data<-c(nrow(GS_overlap[[1]])+nrow(B_overlap[[1]])+nrow(S_overlap[[1]]),
nrow(GS_overlap[[2]])+nrow(B_overlap[[2]])+nrow(S_overlap[[2]]),
nrow(GS_overlap[[3]])+nrow(B_overlap[[3]])+nrow(S_overlap[[3]]))
as.data.frame(over_strand_data, row.names="ch1, ch2, ch3")
as.data.frame(overlap_strand_data, row.names="ch1, ch2, ch3")
as.data.frame(overlap_strand_data)
overlap_strand_data<-as.data.frame(overlap_strand_data)
coul <- brewer.pal(3, "Set3")
coul <- brewer.pal(3, "Set3")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
overlap_strand_data<-as.data.frame(overlap_strand_data)
overlap_strand_data
overlap_strand_data<-c(nrow(GS_overlap[[1]])+nrow(B_overlap[[1]])+nrow(S_overlap[[1]]),
nrow(GS_overlap[[2]])+nrow(B_overlap[[2]])+nrow(S_overlap[[2]]),
nrow(GS_overlap[[3]])+nrow(B_overlap[[3]])+nrow(S_overlap[[3]]))
coul <- brewer.pal(3, "Set3")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
coul <- brewer.pal(3, "Set4")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
coul <- brewer.pal(3, "Set1")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
layout(matrix(c(1),1,1))
layout.show(1)
coul <- brewer.pal(3, "Set1")
barplot(overlap_strand_data,
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS ")
coul <- brewer.pal(3, "Set1")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8,
main="Overlap between deletion model and CDS ")
barplot(overlap_strand_data, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS ")
overlap_strand_data_mg<-data.frame(chromosome1=c(overlap_strand_data[1], nrow(GS_overlap[[1]]),nrow(B_overlap[[1]]),nrow(S_overlap[[1]])),
chromosome2=c(overlap_strand_data[2], nrow(GS_overlap[[2]])+nrow(B_overlap[[2]]),nrow(S_overlap[[2]])),
chromosome3=c(overlap_strand_data[3],nrow(GS_overlap[[3]]),nrow(B_overlap[[3]]),nrow(S_overlap[[3]])))
overlap_strand_data_mg<-data.frame(chromosome1=c(overlap_strand_data[1], nrow(GS_overlap[[1]]),nrow(B_overlap[[1]]),nrow(S_overlap[[1]])),
chromosome2=c(overlap_strand_data[2], nrow(GS_overlap[[2]])+nrow(B_overlap[[2]]),nrow(S_overlap[[2]])),
chromosome3=c(overlap_strand_data[3],nrow(GS_overlap[[3]]),nrow(B_overlap[[3]]),nrow(S_overlap[[3]])))
overlap_strand_data_mg<-data.frame(chromosome1=c(overlap_strand_data[1], nrow(GS_overlap[[1]]),nrow(B_overlap[[1]]),nrow(S_overlap[[1]])),
chromosome2=c(overlap_strand_data[2], nrow(GS_overlap[[2]]),nrow(B_overlap[[2]]),nrow(S_overlap[[2]])),
chromosome3=c(overlap_strand_data[3],nrow(GS_overlap[[3]]),nrow(B_overlap[[3]]),nrow(S_overlap[[3]])))
barplot(overlap_strand_data_mg, names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
overlap_strand_data_mg
barplot(as.matrix(overlap_strand_data_mg), names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
ylim=c(0,80),
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
barplot(as.matrix(overlap_strand_data_mg), names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
width = 0.8, space=0.8,
main="Overlap between deletion model and CDS")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul, border=F,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
arplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site",
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,100),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
layout(matrix(c(1,2),1,2))
layout.show(1)
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between deletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
layout(matrix(c(1,2),1,2))
coul <- brewer.pal(4, "Set1")
barplot(as.matrix(overlap_strand_data_mg), beside=T,names.arg = c("1","2","3"),
col=coul,
xlab="chromosome",
ylab="number of overlapping site", ylim=c(0,90),
main="Overlap between \ndeletion model and CDS")
legend("topright",c("all","GS","Block","SERIAL"), fill=coul,cex = 0.75)
View(CDS_site)
View(CDS_site)
overlap_strand_data_mg
View(overlap_type_data)
View(CDS_site)
View(ch1_overlap_type)
View(ch1_overlap_type[["ch1_convergent"]])
View(ch1_overlap_type[["ch1_divergent"]])
View(ch1_overlap_type[["ch1_tendom_3"]])
View(ch1_overlap_type[["ch1_tendom_5"]])
View(ch1_overlap_type[["ch1_divergent"]])
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="overlapping type",
ylab="choromosome",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
coul <- brewer.pal(4, "Set2")
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="overlapping type",
ylab="choromosome",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
ch1_overlap_type[["ch1_convergent"]][["V1"]]
install.packages("VennDiagram")
#-------------------------------------
library(VennDiagram)
overlap_type_data<-data.frame(chromosome1 = ch1_overlap_info, chromosome2=ch2_overlap_info, chromosome3=ch3_overlap_info)
overlap_type_data
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="overlapping type",
ylab="choromosome",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
layout(matrix(c(1,1,1,2,2), 1,5))
layout.show(2)
barplot(as.matrix(overlap_type_data), beside=T, col=coul, names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
main="Overlapping gene type of S.pombe", ylim=c(0,400))
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul)
barplot(as.matrix(overlap_type_data), col=coul, horiz = F,
names.arg = c(1,2,3),
xlab="choromosome",
ylab="number of gene",
ylim=c(0,800),
main="Overlapping gene type of S.pombe\n(merged)", width = 60, space = 0.7)
legend("topright",c("convergent","divergent","3-tandem", "5-tandem"), fill=coul,cex = 0.75)
View(overlap_matrix_ch1)
View(overlap_matrix)
View(overlap_matrix[["overlap_matrix_ch1"]])
overlap_matrix_ch1<-data.matrix(overlap_matrix$overlap_matrix_ch1)
View(overlap_matrix_ch1)
overlap_heatmap <- heatmap(overlap_matrix_ch1, Rowv=NA, Colv=NA, col=cm.colors(256), scale="row", margin=c(5,10))
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
source('find_overlap_func.r')
library(RColorBrewer)
overlap_heatmap <- heatmap(overlap_matrix_ch1, Rowv=NA, Colv=NA, col=col=brewer.pal(9, "Blues"), scale="row", margin=c(5,10))
overlap_heatmap <- heatmap(overlap_matrix_ch1, Rowv=NA, Colv=NA, col=brewer.pal(9, "Blues"), scale="row", margin=c(5,10))
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS_ch1,five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS$GS_ch1, five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
source('find_overlap_func.r')
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS$GS_ch1, five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
library(ape)
library(stringr)
library(dplyr)
library(writexl)
library(progress)
library(seqinr)
library(RColorBrewer)
source('find_overlap_func.r')
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS$GS_ch1, five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS$GS_ch1, five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2_UTR<-find_overlapping_gene(GS_ch2,five_UTR$five_UTR_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS$GS_ch1, five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
source('find_overlap_func.r')
#--------------------------------------
overlap_strand_gs1_UTR<-find_overlapping_gene(GS$GS_ch1, five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
View(overlap_strand_gs1_UTR)
View(GS)
View(GS[["GS_ch1"]])
overlap_strand_gs2_UTR<-find_overlapping_gene(GS$GS_ch2,five_UTR$five_UTR_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3_UTR<-find_overlapping_gene(GS$GS_ch3,five_UTR$five_UTR_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_B1_UTR<-find_overlapping_gene(Block$B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B2_UTR<-find_overlapping_gene(Block$B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B1_UTR<-find_overlapping_gene(Block$B_ch1,five_UTR$five_UTR_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B2_UTR<-find_overlapping_gene(Block$B_ch2,five_UTR$five_UTR_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B3_UTR<-find_overlapping_gene(Block$B_ch3,five_UTR$five_UTR_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
View(overlap_matrix_ch1)
View(Serial)
mreomve
mget()
mget
View(Serial)
View(Serial[["S_ch1"]])
Serial<-mget(Serial$S_ch1,Serial$S_ch2,Serial$S_ch3)
Serial<-Serial[[-1]]
Serial<-Serial[[-1]][1]
Serial<-Serial[[7:9]]
S_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(SERIALprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
S_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(SERIALprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
S_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(SERIALprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
Serial<-mget(ls(pattern = "^S_"))
View(Serial)
Serial[[-"S_overlap"]]
Serial[-["S_overlap"]]
Serial<-mget(ls(pattern = "^S_ch"))
View(S_overlap)
View(Serial)
overlap_strand_S1<-find_overlapping_gene(Serial$S_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_S2<-find_overlapping_gene(Serial$S_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_S3<-find_overlapping_gene(Serial$S_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_S1_UTR<-find_overlapping_gene(Serial$S_ch1,five_UTR$five_UTR_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_S2_UTR<-find_overlapping_gene(Serial$S_ch2,five_UTR$five_UTR_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_S3_UTR<-find_overlapping_gene(Serial$S_ch3,five_UTR$five_UTR_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
source('~/fission_yeast_project/fission_yeast_practice/find_overlapping_gene.R')
CDS_site<-mget(ls(pattern = "CDS_"))
five_UTR_ch1<-subset(gene_data, seqid == "I" & type =="five_prime_UTR")
five_UTR_ch2<-subset(gene_data, seqid == "II" & type =="five_prime_UTR")
five_UTR_ch3<-subset(gene_data, seqid == "III" & type =="five_prime_UTR")
five_UTR_mit<-subset(gene_data, seqid == "mitochondrial" & type =="five_prime_UTR")
three_UTR_ch1<-subset(gene_data, seqid == "I" & type =="three_prime_UTR")
three_UTR_ch2<-subset(gene_data, seqid == "II" & type =="three_prime_UTR")
three_UTR_ch3<-subset(gene_data, seqid == "III" & type =="three_prime_UTR")
three_UTR_mit<-subset(gene_data, seqid == "mitochondrial" & type =="three_prime_UTR")
five_UTR<-mget(ls(pattern = "five_UTR_"))
three_UTR<-mget(ls(pattern = "three_UTR_"))
GS_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
GS_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(GSprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))),
as.is = TRUE)
overlap_strand_gs1<-find_overlapping_gene(GS_ch1,CDS_site$CDS_ch1,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs2<-find_overlapping_gene(GS_ch2,CDS_site$CDS_ch2,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
overlap_strand_gs3<-find_overlapping_gene(GS_ch3,CDS_site$CDS_ch3,
x_start_name = "start1", x_end_name = "end2",
is_strain = TRUE)
GS<-mget(ls(pattern = "GS_"))
GS_overlap<-mget(ls(pattern = "overlap_strand_gs"))
B_ch1<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "I"),
1,reverse_negative_strand,
up_start="start5", up_end="end5",
down_start="start6", down_end="end6",
up_strand="strand5", down_strand="strand6"))))), as.is = TRUE)
B_ch1 <- na.omit(B_ch1)
B_ch2<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "II"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
B_ch3<-type.convert((as.data.frame(t(as.data.frame(
apply(subset(Bprimer, chr1 == "III"),
1,reverse_negative_strand,
up_start="start1", up_end="end1",
down_start="start2", down_end="end2",
up_strand="strand1", down_strand="strand2"))))), as.is = TRUE)
#--finding overlapping site
overlap_strand_B1<-find_overlapping_gene(B_ch1,CDS_site$CDS_ch1,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B2<-find_overlapping_gene(B_ch2,CDS_site$CDS_ch2,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
overlap_strand_B3<-find_overlapping_gene(B_ch3,CDS_site$CDS_ch3,
x_start_name = "start3", x_end_name = "end4",
is_strain = TRUE)
Block<-mget(ls(pattern = "B_"))
B_overlap<-mget(ls(pattern = "overlap_strand_B"))
View(overlap_strand_B1_UTR)
